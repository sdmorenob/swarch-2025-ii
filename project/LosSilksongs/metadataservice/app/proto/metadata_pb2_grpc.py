# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from app.proto import metadata_pb2 as metadata__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in metadata_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MetadataServiceStub(object):
    """MetadataService provides music metadata enrichment
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnrichTrack = channel.unary_unary(
                '/metadata.MetadataService/EnrichTrack',
                request_serializer=metadata__pb2.EnrichTrackRequest.SerializeToString,
                response_deserializer=metadata__pb2.EnrichTrackResponse.FromString,
                _registered_method=True)
        self.BatchEnrichTracks = channel.unary_unary(
                '/metadata.MetadataService/BatchEnrichTracks',
                request_serializer=metadata__pb2.BatchEnrichRequest.SerializeToString,
                response_deserializer=metadata__pb2.BatchEnrichResponse.FromString,
                _registered_method=True)
        self.SearchTracks = channel.unary_unary(
                '/metadata.MetadataService/SearchTracks',
                request_serializer=metadata__pb2.SearchRequest.SerializeToString,
                response_deserializer=metadata__pb2.SearchResponse.FromString,
                _registered_method=True)


class MetadataServiceServicer(object):
    """MetadataService provides music metadata enrichment
    """

    def EnrichTrack(self, request, context):
        """EnrichTrack enriches a single track with metadata from external sources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchEnrichTracks(self, request, context):
        """BatchEnrichTracks enriches multiple tracks in a single request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchTracks(self, request, context):
        """SearchTracks searches for tracks by various criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnrichTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrichTrack,
                    request_deserializer=metadata__pb2.EnrichTrackRequest.FromString,
                    response_serializer=metadata__pb2.EnrichTrackResponse.SerializeToString,
            ),
            'BatchEnrichTracks': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchEnrichTracks,
                    request_deserializer=metadata__pb2.BatchEnrichRequest.FromString,
                    response_serializer=metadata__pb2.BatchEnrichResponse.SerializeToString,
            ),
            'SearchTracks': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchTracks,
                    request_deserializer=metadata__pb2.SearchRequest.FromString,
                    response_serializer=metadata__pb2.SearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'metadata.MetadataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('metadata.MetadataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetadataService(object):
    """MetadataService provides music metadata enrichment
    """

    @staticmethod
    def EnrichTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata.MetadataService/EnrichTrack',
            metadata__pb2.EnrichTrackRequest.SerializeToString,
            metadata__pb2.EnrichTrackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchEnrichTracks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata.MetadataService/BatchEnrichTracks',
            metadata__pb2.BatchEnrichRequest.SerializeToString,
            metadata__pb2.BatchEnrichResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchTracks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata.MetadataService/SearchTracks',
            metadata__pb2.SearchRequest.SerializeToString,
            metadata__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
