# docker-compose.yml
# Version: 1.0
# Description: Orquestaci√≥n completa de los servicios de MusicShare.


services:

# === API GATEWAY ===
  traefik:
    image: traefik:v3.0
    container_name: musicshare_traefik
    # Ya no usamos 'command', la configuraci√≥n est√° en los archivos
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      # Mapeamos el archivo de configuraci√≥n que acabamos de crear
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # Mantenemos el socket de Docker
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - musicshare-network

  # ===============================
  # üóÑÔ∏è Postgres Database
  # ===============================
  postgres:
    image: postgres:15
    container_name: musicshare_postgres
    environment:
      POSTGRES_USER: music_user
      POSTGRES_PASSWORD: music_pass
      POSTGRES_DB: music_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music_user -d music_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicshare-network

  # ===============================
  # üóÑÔ∏è Postgres Database (Social Service)
  # ===============================
  postgres-social:
    image: postgres:15
    container_name: musicshare_postgres_social
    environment:
      POSTGRES_USER: music_user
      POSTGRES_PASSWORD: music_pass
      POSTGRES_DB: social_db
    volumes:
      - postgres_social_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Puerto diferente para evitar conflictos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music_user -d social_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicshare-network

  # ===============================
  # üçÉ MongoDB Database
  # ===============================
  mongodb:
    image: mongo:7.0
    container_name: musicshare-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: musicshare
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - musicshare-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5


  # ===============================
  # üéß Metadata Service (Spotify Enrichment)
  # ===============================
  metadata-service:
    build:
      context: ./metadataservice
      dockerfile: Dockerfile
    container_name: musicshare-metadata-service
    restart: unless-stopped
    ports:
      - "50051:50051"
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: info
      LOG_FORMAT: json
      DEBUG: "false"

      # gRPC
      GRPC_HOST: 0.0.0.0
      GRPC_PORT: 50051
      GRPC_MAX_WORKERS: 10

      # Spotify API
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID:-your_client_id}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET:-your_client_secret}
      SPOTIFY_MARKET: US

      # Cache (in-memory)
      CACHE_ENABLED: "true"
      CACHE_TTL: 3600
      REDIS_URL: ""

      # Rate limiting
      SPOTIFY_REQUESTS_PER_SECOND: 10
      MAX_BATCH_SIZE: 50
      REQUEST_TIMEOUT: 30

      # Matching
      FUZZY_MATCHING_THRESHOLD: 0.8
      TITLE_WEIGHT: 0.5
      ARTIST_WEIGHT: 0.4
      ALBUM_WEIGHT: 0.1

      # Retry
      MAX_RETRIES: 3
      RETRY_DELAY: 1.0
    networks:
      - musicshare-network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.settimeout(2); r=s.connect_ex((\"localhost\",50051)); s.close(); exit(0 if r==0 else 1)'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ===============================
  # üéµ Music Service
  # ===============================
  music-service:
    build:
      context: ./musicservice
      dockerfile: Dockerfile
    container_name: musicshare-music-service
    restart: unless-stopped
    environment:
      SERVER_PORT: 8081
      ENVIRONMENT: production
      LOG_LEVEL: info

      # MongoDB
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/musicshare?authSource=admin
      MONGODB_DATABASE: musicshare

      # Storage
      STORAGE_TYPE: local
      STORAGE_PATH: /app/uploads

      # Metadata Service
      METADATA_SERVICE_GRPC: metadata-service:50051
      METADATA_SERVICE_HTTP: ""
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      metadata-service:
        condition: service_healthy
    networks:
      - musicshare-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.music-service.rule=PathPrefix(`/api/music`)"
      - "traefik.http.middlewares.music-service-stripprefix.stripprefix.prefixes=/api/music"
      - "traefik.http.routers.music-service.middlewares=music-service-stripprefix"
      - "traefik.http.services.music-service.loadbalancer.server.port=8081"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "--method=GET", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ===============================
  # üë§ User Service
  # ===============================
  userservice:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    container_name: musicshare-userservice
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      music-service:
        condition: service_started
    environment:
      POSTGRES_USER: music_user
      POSTGRES_PASSWORD: music_pass
      POSTGRES_DB: music_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      SECRET_KEY: "replace-this-secret"
      MUSICSERVICE_URL: "http://music-service:8081"
    #volumes:
    #  - ./userservice/app:/app/app:ro
    networks:
      - musicshare-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.userservice.rule=PathPrefix(`/api/users`)"
      - "traefik.http.middlewares.userservice-stripprefix.stripprefix.prefixes=/api/users"
      - "traefik.http.routers.userservice.middlewares=userservice-stripprefix"
      - "traefik.http.services.userservice.loadbalancer.server.port=8002"

  # ===============================
  # üí¨ Social Service
  # ===============================
  social-service:
    build:
      context: ./socialservice
      dockerfile: Dockerfile
    container_name: musicshare-social-service
    restart: unless-stopped
    depends_on:
      postgres-social:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-social:5432/social_db
      SPRING_DATASOURCE_USERNAME: music_user
      SPRING_DATASOURCE_PASSWORD: music_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - musicshare-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.social-service.rule=PathPrefix(`/api/social`) || PathPrefix(`/swagger-ui`) || PathPrefix(`/v3/api-docs`)"
      - "traefik.http.middlewares.social-service-stripprefix.stripprefix.prefixes=/api/social"
      - "traefik.http.routers.social-service.middlewares=social-service-stripprefix"
      - "traefik.http.services.social-service.loadbalancer.server.port=8083"


  # ===============================
  # üåê Frontend (React)
  # ===============================
  frontend:
    build:
      context: ./frontend/MusicShareFrontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: musicshare-frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - userservice
      - music-service
    networks:
      - musicshare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ===============================
  # üåê MicroFrontend (Post)
  # ===============================
  formulario-post-front:
    build:
      context: ./formulario-post-front
      dockerfile: Dockerfile
    container_name: musicshare-formulario-post-front
    restart: unless-stopped
    networks:
      - musicshare-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.formulario-post-front.rule=PathPrefix(`/formulario-post`)"
      - "traefik.http.middlewares.formulario-post-front-stripprefix.stripprefix.prefixes=/formulario-post"
      - "traefik.http.routers.formulario-post-front.middlewares=formulario-post-front-stripprefix"
      - "traefik.http.services.formulario-post-front.loadbalancer.server.port=80"



  # ===============================
  # üêá RabbitMQ + Notification Service
  # ===============================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: musicshare_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - musicshare-network

  notificationservice:
    build:
      context: ./notificationservice
      dockerfile: Dockerfile
    container_name: notificationservice
    depends_on:
      - rabbitmq
    environment:
      AMQP_URL: "amqp://guest:guest@rabbitmq/"
      QUEUE_NAME: "notifications"
    networks:
      - musicshare-network
    labels:
      - "traefik.enable=true"
      # Router para la API REST
      - "traefik.http.routers.notificationservice-rest.rule=PathPrefix(`/api/notifications`)"
      - "traefik.http.middlewares.notificationservice-stripprefix.stripprefix.prefixes=/api/notifications"
      - "traefik.http.routers.notificationservice-rest.middlewares=notificationservice-stripprefix"
      - "traefik.http.services.notificationservice.loadbalancer.server.port=8082"
      # Router para WebSockets
      - "traefik.http.routers.notificationservice-ws.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.notificationservice-ws.service=notificationservice" # Reutiliza el servicio definido arriba


# ===============================
# üß≠ Network & Volumes
# ===============================
networks:
  musicshare-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  postgres_social_data:
    driver: local
